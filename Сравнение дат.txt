#include <iostream>
#include <string.h>
#include <chrono>
#include <ctime>
#pragma warning(disable:4996)

using namespace std;

// Проверка правильности ввода года
int inputValidationYear(char* date1, char* date2)
{
    if ((date1[0] == '0' && date1[1] == '0' && date1[2] == '0' && date1[3] == '0') ||
        (date2[0] == '0' && date2[1] == '0' && date2[2] == '0' && date2[3] == '0'))
    {
        return 0;
    }

    for (int i = 0; i < 4; i++)
    {
        if (date1[i] < '0' || date1[i] > '9' ||
            date2[i] < '0' || date2[i] > '9')
        {
            return 0;
        }
    }

    if (date1[4] != '.' || date1[7] != '.' || date2[4] != '.' || date2[7] != '.')
    {
        return 0;
    }
    return 1;
}

// Проверка правильности ввода месяца
int inputValidationMonth(char* date1, char* date2)
{
    if (date1[5] < '0' || date1[5] > '1' || date2[5] < '0' || date2[5] > '1')
    {
        return 0;
    }

    if (date1[5] == '0')
    {
        if (date1[6] < '1' || date1[6] > '9')
        {
            return 0;
        }
    }

    if (date2[5] == '0')
    {
        if (date2[6] < '1' || date2[6] > '9')
        {
            return 0;
        }
    }

    if (date1[5] == '1')
    {
        if (date1[6] < '0' || date1[6] > '2')
        {
            return 0;
        }
    }

    if (date2[5] == '1')
    {
        if (date2[6] < '0' || date2[6] > '2')
        {
            return 0;
        }
    }
    return 1;
}

// Проверка правильности ввода дня
int inputValidationDay(char* date1, char* date2)
{
    if (date1[8] == '0')
    {
        if (date1[9] < '1' || date1[9] > '9')
        {
            return 0;
        }
    }

    if (date2[8] == '0')
    {
        if (date2[9] < '1' || date2[9] > '9')
        {
            return 0;
        }
    }

    if (date1[8] == '3')
    {
        if (date1[9] < '0' || date1[9] > '1')
        {
            return 0;
        }
    }

    if (date2[8] == '3')
    {
        if (date2[9] < '0' || date2[9] > '1')
        {
            return 0;
        }
    }

    if (date1[8] < '1' || date1[8] > '2' ||
        date2[8] < '1' || date2[8] > '2')
    {
        if (date1[9] < '0' || date1[9] > '9' ||
            date2[9] < '0' || date2[9] > '9')
        {
            return 0;
        }
    }

    if (date1[10] != '\0' || date2[10] != '\0')
    {
        return 0;
    }
    return 1;
}

// Функция сравнения дат №1
bool compareDates1(char* date1, char* date2)
{
    int year1 = ((date1[0] - '0') * 1000) + ((date1[1] - '0') * 100) + ((date1[2] - '0') * 10) + (date1[3] - '0');
    int year2 = ((date2[0] - '0') * 1000) + ((date2[1] - '0') * 100) + ((date2[2] - '0') * 10) + (date2[3] - '0');

    int month1 = ((date1[5] - '0') * 10) + (date1[6] - '0');
    int month2 = ((date2[5] - '0') * 10) + (date2[6] - '0');

    int day1 = ((date1[8] - '0') * 10) + (date1[9] - '0');
    int day2 = ((date2[8] - '0') * 10) + (date2[9] - '0');

    if ((year1 < 1 || year1 > 9999) || (year2 < 1 || year2 > 9999))
    {
        return false;
    }

    if ((month1 < 1 || month1 > 12) || (month2 < 1 || month2 > 12))
    {
        return false;
    }

    if ((day1 < 1 || day1 > 31) || (day1 < 1 || day2 > 31))
    {
        return false;
    }

    if (date1[4] != '.' || date1[7] != '.' || date2[4] != '.' || date2[7] != '.')
    {
        return false;
    }

    if (date1[10] != '\0' || date2[10] != '\0')
    {
        return false;
    }

    int intDate1[3] = { year1, month1, day1 };
    int intDate2[3] = { year2, month2, day2 };

    int i = 0;

    while (i < 3)
    {
        if (intDate1[i] > intDate2[i])
        {
            return false;
        }
        else if (intDate1[i] < intDate2[i])
        {
            return true;
        }
        i++;
    }
    return false;
}

// Функция сравнения дат №2
bool compareDates2(char* date1, char* date2)
{
    if (inputValidationYear(date1, date2) == 1 &&
        inputValidationMonth(date1, date2) == 1 &&
        inputValidationDay(date1, date2) == 1)
    {
        int result = strcmp(date1, date2);

        if (result >= 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    return false;
}

// Нахождение разницы между датами в днях
int differenceDates(char* date1, char* date2)
{
    int year1 = ((date1[0] - '0') * 1000) + ((date1[1] - '0') * 100) + ((date1[2] - '0') * 10) + (date1[3] - '0');
    int year2 = ((date2[0] - '0') * 1000) + ((date2[1] - '0') * 100) + ((date2[2] - '0') * 10) + (date2[3] - '0');

    int month1 = ((date1[5] - '0') * 10) + (date1[6] - '0');
    int month2 = ((date2[5] - '0') * 10) + (date2[6] - '0');

    int day1 = ((date1[8] - '0') * 10) + (date1[9] - '0');
    int day2 = ((date2[8] - '0') * 10) + (date2[9] - '0');

    int a1 = (14 - month1) / 12;
    int y1 = year1 + 4800 - a1;
    int m1 = month1 + 12 * a1 - 3;
    int JDN1 = day1 + ((153 * m1 + 2) / 5) + 365 * y1 + (y1 / 4) - (y1 / 100) + (y1 / 400) - 32045;

    int a2 = (14 - month2) / 12;
    int y2 = year2 + 4800 - a2;
    int m2 = month2 + 12 * a2 - 3;
    int JDN2 = day2 + ((153 * m2 + 2) / 5) + 365 * y2 + (y2 / 4) - (y2 / 100) + (y2 / 400) - 32045;

    int difference = JDN1 - JDN2;

    if (difference < 0)
    {
        return -difference;
    }
    return difference;
}

// Функция возвращает день недели первой даты
int dayOfWeekDate1(char* date1)
{
    int year1 = ((date1[0] - '0') * 1000) + ((date1[1] - '0') * 100) + ((date1[2] - '0') * 10) + (date1[3] - '0');
    int month1 = ((date1[5] - '0') * 10) + (date1[6] - '0');
    int day1 = ((date1[8] - '0') * 10) + (date1[9] - '0');

    std::tm time_in = { 0, 0, 0, // second, minute, hour
    day1, month1 - 1, year1 - 1900 }; // 1-based day, 0-based month, year since 1900
    std::time_t time_temp = std::mktime(&time_in);
    const std::tm* time_out = std::localtime(&time_temp);

    if (time_out->tm_wday == 0)
    {
        return 7;
    }
    return time_out->tm_wday;
}

// Функция возвращает день недели второй даты
int dayOfWeekDate2(char* date2)
{
    int year2 = ((date2[0] - '0') * 1000) + ((date2[1] - '0') * 100) + ((date2[2] - '0') * 10) + (date2[3] - '0');
    int month2 = ((date2[5] - '0') * 10) + (date2[6] - '0');
    int day2 = ((date2[8] - '0') * 10) + (date2[9] - '0');

    std::tm time_in = { 0, 0, 0, // second, minute, hour
        day2, month2 - 1, year2 - 1900 }; // 1-based day, 0-based month, year since 1900
    std::time_t time_temp = std::mktime(&time_in);
    const std::tm* time_out = std::localtime(&time_temp);

    if (time_out->tm_wday == 0)
    {
        return 7;
    }
    return time_out->tm_wday;
}

// Нахождение разницы между датами в рабочих днях
int differenceWorkdays(char* date1, char* date2)
{
    int weeks = differenceDates(date1, date2) / 7;
    int workdays;

    if (dayOfWeekDate1(date1) - dayOfWeekDate2(date2) == 0)
    {
        workdays = weeks * 5;
        return workdays;
    }

    switch (dayOfWeekDate1(date1))
    {
    case 1:
        for (int i = 2; i < 7; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + (i - 1);
                return workdays;
            }
        }
        workdays = weeks * 5 + 5;
        return workdays;

    case 2:
        if (dayOfWeekDate2(date2) == 1)
        {
            workdays = weeks * 5 + 4;
            return workdays;
        }

        for (int i = 3; i < 7; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + (i - 2);
                return workdays;
            }
        }
        workdays = weeks * 5 + 4;
        return workdays;

    case 3:
        for (int i = 1; i < 3; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + (i + 2);
                return workdays;
            }
        }

        for (int i = 4; i < 6; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + (i - 3);
                return workdays;
            }
        }
        workdays = weeks * 5 + 3;
        return workdays;

    case 4:
        for (int i = 1; i < 4; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + (i + 1);
                return workdays;
            }
        }

        if (dayOfWeekDate2(date2) == 5)
        {
            workdays = weeks * 5 + 1;
            return workdays;
        }

        workdays = weeks * 5 + 2;
        return workdays;

    case 5:
        for (int i = 1; i < 5; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + i;
                return workdays;
            }
        }

        workdays = weeks * 5 + 1;
        return workdays;

    case 6:
    case 7:
        for (int i = 1; i < 6; i++)
        {
            if (dayOfWeekDate2(date2) == i)
            {
                workdays = weeks * 5 + (i - 1);
                return workdays;
            }
        }

        if (dayOfWeekDate2(date2) == 7)
        {
            workdays = weeks * 5;
            return workdays;
        }

        workdays = weeks * 5 + 5;
        return workdays;

    default:
        return 0;
    }
}

// Сортировка выбором
void selectionSort(int* num, int size)
{
    int min; 
    for (int i = 0; i < size - 1; i++)
    {
        min = i; 
        for (int j = i + 1; j < size; j++) 
        {
            if (num[j] < num[min]) 
                min = j;       
        }
        int temp = num[i];     
        num[i] = num[min];
        num[min] = temp;
    }
}

// Сортировка методом пузырька 
void bubbleSort(int* num, int size)
{
    for (int i = 0; i < size - 1; i++) 
    {
        for (int j = 0; j < size - i - 1; j++) 
        {
            if (num[j] > num[j + 1]) 
            {
                int temp = num[j];
                num[j] = num[j + 1];
                num[j + 1] = temp;
            }
        }
    }
}

// Сортировка вставками
void insertionSort(int* num, int size)
{
    for (int i = 1; i < size; i++)
    {
        for (int j = i; j > 0 && num[j - 1] > num[j]; j--)
        {
            int temp = num[j - 1];
            num[j - 1] = num[j];
            num[j] = temp;
        }
    }
}

// Среднее арифметическое
float arithmeticMean(int* num, int size) 
{
    float sum = 0;
    for (int i = 0; i < size; i++) 
    {
        sum += num[i];
    }
    return sum / size;
}

// Медиана числового ряда
float findMedian(int* num)
{
    float sum = 0;
    sum = num[4] + num[5];
    return sum / 2;
}

int main()
{
    char date1[] = "2020.09.13";
    char date2[] = "2020.11.14";

    char date3[] = "2020.09.13";
    char date4[] = "2014.10.14";

    char date5[] = "2020.09.13";
    char date6[] = "2020.09.14";

    char date7[] = "2019.09.13";
    char date8[] = "2020.09.14";

    char date9[] = "2005.09.13";
    char date10[] = "2020.09.14";

    char date11[] = "2020.09.13";
    char date12[] = "2020.09.14";

    char date13[] = "2020.09.13";
    char date14[] = "2004.10.21";

    char date15[] = "2020.09.14";
    char date16[] = "2010.09.30";

    char date17[] = "2020.09.13";
    char date18[] = "2020.09.13";

    char date19[] = "2020.09.13";
    char date20[] = "2000.09.14";

    auto start1 = std::chrono::high_resolution_clock::now();
    for (int x = 0; x < 1; x++)
    {
        cout << compareDates1(date1, date2) << endl;
    }
    auto end1 = std::chrono::high_resolution_clock::now();
    auto start2 = std::chrono::high_resolution_clock::now();
    for (int y = 0; y < 1; y++)
    {
        cout << compareDates2(date1, date2) << endl;
    }
    auto end2 = std::chrono::high_resolution_clock::now();
    cout << "compareDates1 function took "
        << std::chrono::duration_cast<std::chrono::milliseconds>(end1 - start1).count()
        << " milliseconds\n";
    cout << "compareDates2 function took "
        << std::chrono::duration_cast<std::chrono::milliseconds>(end2 - start2).count()
        << " milliseconds\n";

    if (compareDates1(date1, date2) == 1 && compareDates2(date1, date2) == 1)
    {
        cout << "Work days difference: " << differenceWorkdays(date1, date2) << " days" << endl;
        cout << "First date is this day of the week: " << dayOfWeekDate1(date1) << endl;
        cout << "Second date is this day of the week: " << dayOfWeekDate2(date2) << endl;
    }
    
    if (inputValidationDay(date1, date2) == 1 && inputValidationMonth(date1, date2) == 1 && inputValidationYear(date1, date2) == 1 &&
        inputValidationDay(date3, date4) == 1 && inputValidationMonth(date3, date4) == 1 && inputValidationYear(date3, date4) == 1 &&
        inputValidationDay(date5, date6) == 1 && inputValidationMonth(date5, date6) == 1 && inputValidationYear(date5, date6) == 1 &&
        inputValidationDay(date7, date8) == 1 && inputValidationMonth(date7, date8) == 1 && inputValidationYear(date7, date8) == 1 &&
        inputValidationDay(date9, date10) == 1 && inputValidationMonth(date9, date10) == 1 && inputValidationYear(date9, date10) == 1 && 
        inputValidationDay(date11, date12) == 1 && inputValidationMonth(date11, date12) == 1 && inputValidationYear(date11, date12) == 1 &&
        inputValidationDay(date13, date14) == 1 && inputValidationMonth(date13, date14) == 1 && inputValidationYear(date13, date14) == 1 &&
        inputValidationDay(date15, date16) == 1 && inputValidationMonth(date15, date16) == 1 && inputValidationYear(date15, date16) == 1 &&
        inputValidationDay(date17, date18) == 1 && inputValidationMonth(date17, date18) == 1 && inputValidationYear(date17, date18) == 1 &&
        inputValidationDay(date19, date20) == 1 && inputValidationMonth(date19, date20) == 1 && inputValidationYear(date19, date20) == 1)
    {
        int arr[10] = { differenceDates(date1, date2), differenceDates(date3, date4),  differenceDates(date5, date6),
                differenceDates(date7, date8), differenceDates(date9, date10), differenceDates(date11, date12),
                differenceDates(date13, date14), differenceDates(date15, date16), differenceDates(date17, date18),
                differenceDates(date19, date20) };

        cout << "\nUnsorted Array: ";
        for (int i = 0; i < 10; ++i)
        {
            cout << arr[i] << " ";
        }
        cout << endl;

        auto start3 = std::chrono::high_resolution_clock::now();
        for (int x = 0; x < 10000; x++)
        {
            int arr1[10] = { differenceDates(date1, date2), differenceDates(date3, date4), differenceDates(date5, date6),
                             differenceDates(date7, date8), differenceDates(date9, date10), differenceDates(date11, date12),
                             differenceDates(date13, date14), differenceDates(date15, date16), differenceDates(date17, date18),
                             differenceDates(date19, date20) };
            insertionSort(arr1, 10);
            cout << "\nSorted Array by Insertion Sort: ";
            for (int i = 0; i < 10; ++i)
            {
                cout << arr1[i] << " ";
            }
            cout << endl;
            cout << "Arithmetic Mean: " << arithmeticMean(arr1, 10) << endl;
            cout << "Median: " << findMedian(arr1) << endl;
        }
        auto end3 = std::chrono::high_resolution_clock::now();

        auto start4 = std::chrono::high_resolution_clock::now();
        for (int x = 0; x < 10000; x++)
        {
            int arr2[10] = { differenceDates(date1, date2), differenceDates(date3, date4),  differenceDates(date5, date6),
                             differenceDates(date7, date8), differenceDates(date9, date10), differenceDates(date11, date12),
                             differenceDates(date13, date14), differenceDates(date15, date16), differenceDates(date17, date18),
                             differenceDates(date19, date20) };
            selectionSort(arr2, 10);
            cout << "\nSorted Array by Selection Sort: ";
            for (int i = 0; i < 10; ++i)
            {
                cout << arr2[i] << " ";
            }
            cout << endl;
            cout << "Arithmetic Mean: " << arithmeticMean(arr2, 10) << endl;
            cout << "Median: " << findMedian(arr2) << endl;
        }
        auto end4 = std::chrono::high_resolution_clock::now();

        auto start5 = std::chrono::high_resolution_clock::now();
        for (int x = 0; x < 10000; x++)
        {
            int arr3[10] = { differenceDates(date1, date2), differenceDates(date3, date4), differenceDates(date5, date6),
                             differenceDates(date7, date8), differenceDates(date9, date10), differenceDates(date11, date12),
                             differenceDates(date13, date14), differenceDates(date15, date16), differenceDates(date17, date18),
                             differenceDates(date19, date20) };
            bubbleSort(arr3, 10);
            cout << "\nSorted Array by Bubble Sort: ";
            for (int i = 0; i < 10; ++i)
            {
                cout << arr3[i] << " ";
            }
            cout << endl;
            cout << "Arithmetic Mean: " << arithmeticMean(arr3, 10) << endl;
            cout << "Median: " << findMedian(arr3) << endl;
        }
        auto end5 = std::chrono::high_resolution_clock::now();

        cout << "insertionSort function took "
            << std::chrono::duration_cast<std::chrono::milliseconds>(end3 - start3).count()
            << " milliseconds\n";

        cout << "selectionSort function took "
            << std::chrono::duration_cast<std::chrono::milliseconds>(end4 - start4).count()
            << " milliseconds\n";

        cout << "bubbleSort function took "
            << std::chrono::duration_cast<std::chrono::milliseconds>(end5 - start5).count()
            << " milliseconds\n";
    }

    return 0;
}
